#!/bin/bash -ex

# This script runs the integration tests on an already configured LXD machine
# where the tests are run LXD in LXD.  i.e. an LXD container is spawned, pylxd
# is copied into the container, and then the container runs the integration
# tests.

# This script is NOT used by the CI system, but for people to run integration
# tests on their own computers where they don't want the integration test to
# mess with their setup.

DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

declare -A RELEASE_IMAGES=(
    [bionic]="18.04"
    [focal]="20.04"
)

function run_tests {
    local target="$1"
    local image="${RELEASE_IMAGES[$target]}"
    local container_name
    container_name="pylxd-$target-$(uuidgen | cut -d- -f1)"
    local container_image="ubuntu:${image}"
    echo "Running ${image} integration tests"

    lxc launch --ephemeral "$container_image" "$container_name" -c security.nesting=true
    lxc exec "$container_name" -- cloud-init status --long --wait

    lxc exec "$container_name" -- mkdir -p /opt/pylxd
    # NOTE: rockstar (13 Sep 2016) - --recursive is not supported in lxd <2.1, so
    # until we have pervasive support for that, we'll do this tar hack.
    local ldir="$DIR/.."
    env -C "$ldir" tar cf - ./* .git | lxc exec "$container_name" -- tar xf - -C /opt/pylxd
    lxc exec "$container_name" -- /bin/sh -c "env -C /opt/pylxd integration/run-integration-tests"
    lxc delete --force "$container_name"
}

declare -a images
if [ $# -gt 0 ]; then
    images=("$@")
else
    images=("${!RELEASE_IMAGES[@]}")
fi
for image in "${images[@]}"; do
    run_tests "$image"
done
